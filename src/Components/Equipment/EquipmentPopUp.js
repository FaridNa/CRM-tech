import React from 'react';
import styles from './EquipmentPopUp.module.scss'
import Close from '../../img/close.png'
import { $user } from "../../state/user";
import { $depStatus } from "../../state/user";
import { useStore } from "effector-react";
import { createEquipment } from "../../actions/CreateEquipment";
import { setShowTask } from "../../state/showTask";
import { getAllByAltText } from "@testing-library/react";
import { useState } from 'react';
import { editEquipment } from '../../actions/EditEquipment';


const EquipmentPopUp = ({ method, close, item }) => {


    const user = useStore($user);
    const dep = useStore($depStatus);


    const user_name = user.NAME + " " + user.LAST_NAME + " " + user.SECOND_NAME;

    const [selectedStatus, setSelectedStatus] = useState(null);
    const [noBlockNumberCheck, setNoBlockNumberCheck] = useState(false);

    const [form, setForm] = useState({
        id: '',
        name: '',
        type: '',
        type1: '',
        type2: '',
        type3: '',
        description: '',
        status: '',
        blockNumber: '',
        techName: '',
        brak: '',
        history: ''
    });

    const type_options = [
        { value: '–ú–æ–Ω—Ç–∞–∂–Ω—ã–µ', label: 'üõ†Ô∏è –ú–æ–Ω—Ç–∞–∂–Ω—ã–µ' },
        { value: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', label: 'üß∞ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã' },
        { value: '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏', label: 'üß∑ –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏' }
    ]

    const montazh_options = [
        { value: '–û—Ö—Ä–∞–Ω–Ω—ã–µ –ë–ª–æ–∫–∏', label: 'üîí –û—Ö—Ä–∞–Ω–Ω—ã–µ –ë–ª–æ–∫–∏' },
        { value: '–í–∏–¥–µ–æ–∫–∞–º–µ—Ä—ã', label: 'üé• –í–∏–¥–µ–æ–∫–∞–º–µ—Ä—ã' },
        { value: '–ü—Ä–æ—á–µ–µ', label: '–ü—Ä–æ—á–µ–µ' }
    ]

    const instrument_options = [
        { value: '–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã', label: 'üìê –ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã' },
        { value: '–†—É—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', label: 'üî® –†—É—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã' },
        { value: '–ü—Ä–æ—á–µ–µ', label: '–ü—Ä–æ—á–µ–µ' }
    ]

    const rashodnik_options = [
        { value: '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã', label: 'üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã' },
        { value: '–ö–ª—é—á–∏', label: 'üîë –ö–ª—é—á–∏' },
        { value: '–ü—Ä–æ—á–µ–µ', label: '–ü—Ä–æ—á–µ–µ' }
    ]

    const block_options = [
        { value: '–°–∏-–ù–æ—Ä–¥', label: '–°–∏-–ù–æ—Ä–¥' },
        { value: '–ù–µ–º–∞–Ω', label: '–ù–µ–º–∞–Ω' },
        { value: '–°—Ç—Ä—É–Ω–∞', label: '–°—Ç—Ä—É–Ω–∞' },
        { value: '–õ–∞—Ä—Å', label: '–õ–∞—Ä—Å' }
    ]

    const info_history = (item) => {
        const history_paragraphs = {
            create: <span style={{ color: '#003366' }}>–°–æ–∑–¥–∞–Ω–æ</span>,
            install: <span style={{ color: 'green' }}>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span>,
            equip: <span style={{ color: 'yellow' }}>–≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ</span>,

            //–°—Ç–∞—Ç—É—Å—ã:
            –í—ã–¥–∞–Ω: <span style={{ color: '#f77f00' }}>–í—ã–¥–∞–Ω–æ</span>,
            –£—Ç–µ—Ä—è–Ω: <span style={{ color: '#d62828' }}>–£—Ç–µ—Ä—è–Ω–æ</span>,
            –í–æ–∑–≤—Ä–∞—â–µ–Ω: <span style={{ color: '#023047' }}>–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ</span>
        }

        return (JSON.parse(item.history)?.map(el =>
            <div>
                {el.type === "editStatus" ? history_paragraphs[el.value.status] : history_paragraphs[el.type]}
                <span style={{ float: "right" }}>{el.date}</span>
            </div>
        ))
    }

    //–ó–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –û–∫–Ω–æ
    const closePopUp = (element) => {
        element.stopPropagation()
        close(false)
    }

    return (
        // –î–∏–≤—ã, –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ —Ä–∞–∑–º–µ—Ä –í—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –û–∫–Ω–∞
        <div className={styles.wrapper}> <div className={styles.popUpWrapper}> <div className={styles.closeWrapper} onClick={(e) => { closePopUp(e); }}><img src={Close} alt="" /></div>

            {/* ANCHOR - –ú–ï–¢–û–î - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ */}
            {method === "info" ?
                <div className={styles.equipmentInfo}>
                    <div className={styles.block}>
                        <p className={styles.title}>{item.name}</p>
                        <p>–¢–∏–ø: {item.type1}{item.type2 ? "/" + item.type2 : ""}{item.type3 ? "/" + item.type3 : ""}</p>
                        <p>–û–ø–∏—Å–∞–Ω–∏–µ: {item.description}</p>
                        <p>–°—Ç–∞—Ç—É—Å: {item.status === "–°–æ–∑–¥–∞–Ω" ? "–ù–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω" : ""}</p>
                        <p>–ó–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞: {item.techName}</p>
                        <p>–ù–æ–º–µ—Ä –ë–ª–æ–∫–∞: {item.blockNumber}</p>
                    </div>

                    <div className={styles.block}>
                        <p className={styles.title}>–ò—Å—Ç–æ—Ä–∏—è:</p>
                        {info_history(item)}

                    </div>
                </div>
                : null}

            {/* ANCHOR - –ú–ï–¢–û–î - –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ */}
            {method === "create" ?
                <div className={styles.equipmentCreate}>
                    <b>–í–∏–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b>
                    <select onChange={(e) => {
                        setForm(prevState => ({ ...prevState, type: e.target.value, name: "" }))
                        console.log("–í–∏–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è = " + form.type)
                    }}>
                        {type_options.map(el => <option value={el.value} key={el.value}>{el.label}</option>)}
                        <option value="" selected disabled hidden>–í—ã–±–µ—Ä–∏—Ç–µ –í–∏–ø –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</option>
                    </select>

                    {form.type !== "" ? <div>
                        <b>–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b>
                        <select onChange={(e) => {
                            setForm(prevState => ({ ...prevState, type1: e.target.value, name: "" }))
                            console.log("–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è = " + form.type1)
                        }}>
                            {form.type === "–ú–æ–Ω—Ç–∞–∂–Ω—ã–µ" ? montazh_options.map(el => <option value={el.value} key={el.value}>{el.label}</option>) : null}
                            {form.type === "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã" ? instrument_options.map(el => <option value={el.value} key={el.value}>{el.label}</option>) : null}
                            {form.type === "–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏" ? rashodnik_options.map(el => <option value={el.value} key={el.value}>{el.label}</option>) : null}
                            <option value="" selected disabled hidden>–í—ã–±–µ—Ä–∏—Ç–µ –¢–∏–ø –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</option>
                        </select>

                        {form.type1 === "–û—Ö—Ä–∞–Ω–Ω—ã–µ –ë–ª–æ–∫–∏" ? <label> <b>–¢–∏–ø –±–ª–æ–∫–∞:</b>
                            <select onChange={(e) => {
                                setForm(prevState => ({ ...prevState, type2: e.target.value, name: "–û—Ö—Ä–∞–Ω–Ω—ã–π –ë–ª–æ–∫ " + e.target.value + " ‚Ññ" }))
                                console.log("–¢–∏–ø –±–ª–æ–∫–∞ = " + form.type2)
                            }}>
                                {block_options.map(el => <option value={el.value} key={el.value}>{el.label}</option>)}
                                <option value="" selected disabled hidden>–í—ã–±–µ—Ä–∏—Ç–µ –¢–∏–ø –ë–ª–æ–∫–∞</option>
                            </select>
                        </label>
                            : null}

                        <b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b>
                        <input type="text" value={form.name} onChange={(e) => {
                            setForm(prevState => ({ ...prevState, name: e.target.value }))
                        }}></input>

                        <b>–î–æ–ø. –û–ø–∏—Å–∞–Ω–∏–µ:</b>
                        <input type="text" value={form.description} onChange={(e) => {
                            setForm(prevState => ({ ...prevState, description: e.target.value }))
                        }}></input>
                    </div> : null}

                    <b>–¢–µ—Ö–Ω–∏–∫:</b>
                    <select onChange={(e) => {
                        setForm(prevState => ({ ...prevState, techName: e.target.value }))
                    }}>
                        {dep.map(e => e.LAST_NAME + " " + e.NAME + " " + e.SECOND_NAME).filter(el => !el.includes("–ù–∞—á–∞–ª—å–Ω–∏–∫")).map(el => <option value={el} key={el}>{el}</option>)}
                        <option value="" selected disabled hidden>–í—ã–±–µ—Ä–∏—Ç–µ –¢–µ—Ö–Ω–∏–∫–∞</option>
                    </select>

                    <p></p>
                    <button onClick={async (e) => {
                        await createEquipment(form, user) ?
                            closePopUp(e)
                            : console.log("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
                    }}>–î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</button>
                </div>
                : null}

            {/* ANCHOR - –ú–ï–¢–û–î -–ò–∑–º–µ–Ω–µ–Ω–∏–µ –°—Ç–∞—Ç—É—Å–∞ */}
            {method === "editStatus" ?
                <div className={styles.equipmentEditStatus}>

                    <p>–°—Ç–∞—Ç—É—Å: {item.status}</p>
                    <p>{item.name}</p>
                    <p>–ó–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞: {item.techName}</p>

                    {selectedStatus ? selectedStatus === "–í—ã–¥–∞–Ω" ? <div>
                        <div style={{ width: '80%' }}>

                            {noBlockNumberCheck === false ? <div>
                                <p className={styles.title}>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞:</p>
                                <input type="text" value={form.blockNumber} onChange={(e) => {
                                    setForm(prevState => ({ ...prevState, blockNumber: e.target.value }))
                                }}></input>
                            </div> : null}

                            <p className={styles.title} style={{ display: 'inline' }}>–ë–µ–∑ –Ω–æ–º–µ—Ä–∞ –±–ª–æ–∫–∞:</p>
                            <input className={styles.checkbox} type="checkbox" onClick={e => e.target.checked ? setNoBlockNumberCheck(true) : setNoBlockNumberCheck(false)}></input>
                        </div>
                        <button style={{ backgroundColor: '#f77f00' }} onClick={e => noBlockNumberCheck
                            ? editEquipment("editStatus", { id: item.id, status: '–í—ã–¥–∞–Ω', techName: item.techName, blockNumber: 0 }, user).then(closePopUp(e))
                            : editEquipment("editStatus", { id: item.id, status: '–í—ã–¥–∞–Ω', techName: item.techName, blockNumber: form.blockNumber }, user).then(closePopUp(e))
                        }>–í—ã–¥–∞—Ç—å</button>
                    </div> : null : <div>
                        {item.status !== "–í—ã–¥–∞–Ω" ?
                            <button style={{ backgroundColor: '#f77f00' }} onClick={e => setSelectedStatus("–í—ã–¥–∞–Ω")}>–í—ã–¥–∞–Ω </button> : null}
                        {item.status !== "–£—Ç–µ—Ä—è–Ω" ?
                            <button style={{ backgroundColor: '#d62828' }} onClick={e => editEquipment("editStatus", { id: item.id, status: '–£—Ç–µ—Ä—è–Ω', techName: item.techName}, user).then(closePopUp(e))}>–£—Ç–µ—Ä—è–Ω </button> : null}
                        {item.status !== "–í–æ–∑–≤—Ä–∞—â–µ–Ω" ?
                            <button style={{ backgroundColor: '#023047' }} onClick={e => editEquipment("editStatus", { id: item.id, status: '–í–æ–∑–≤—Ä–∞—â–µ–Ω', techName: item.techName}, user).then(closePopUp(e))}>–í–æ–∑–≤—Ä–∞—â–µ–Ω </button> : null}
                    </div>}

                </div> : null}


        </div></div>);
};

export default EquipmentPopUp;